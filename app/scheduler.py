from apscheduler.schedulers.background import BackgroundScheduler
from app.services.hh_api import fetch_vacancies
from app.crud.vacancy import create_vacancy
from app.database import SessionLocal
from app.schemas.vacancy import VacancyCreate
from app.logger import logger

def job_fetch_vacancies():
    logger.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ —Å–±–æ—Ä—É –≤–∞–∫–∞–Ω—Å–∏–π...")

    db = SessionLocal()
    try:
        items = fetch_vacancies("Python", area=1002)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(items)} –≤–∞–∫–∞–Ω—Å–∏–π")

        for item in items:
            vacancy_data = VacancyCreate(
                title=item["name"],
                company=item["employer"]["name"] if item.get("employer") else "N/A",
                location=item["area"]["name"] if item.get("area") else "N/A",
                url=item["alternate_url"]
            )
            create_vacancy(db, vacancy_data)

        logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

    except Exception as error:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –≤–∞–∫–∞–Ω—Å–∏–π: {error}")

    finally:
        db.close()
        logger.debug("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")


def start_scheduler():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á...")
    scheduler = BackgroundScheduler()
    job_fetch_vacancies()
    scheduler.add_job(job_fetch_vacancies, "interval", minutes=1)
    scheduler.start()
    logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 1 –º–∏–Ω—É—Ç–∞)")
